---
import { Image } from "astro:assets";
import Logo from "../../assets/logo.png";
import NavImage from "../../assets/common/nav-image.png";
import ChatIcon from "../../assets/home/chat.png";
import CallIcon from "../../assets/home/call.png";

const navItems = [
  { label: "Home", href: "/" },
  { label: "About Us", href: "/about-us" },
  {
    label: "Services",
    href: "/services",
    hasDropdown: true,
    dropdownItems: [
      { label: "Ghost Writing", href: "/services/ghost-writing" },
      { label: "Article Publication", href: "/services/article-publication" },
      { label: "Cover Design", href: "/services/cover-design" },
      { label: "Audiobooks", href: "/services/audiobooks" },
      { label: "Book Printing", href: "/services/book-printing" },
      { label: "Book Video Trailer", href: "/services/book-video-trailer" },
      { label: "Web Design", href: "/services/web-design" },
      { label: "Blog Writing", href: "/services/blog-writing" },
      { label: "Book Marketing", href: "/services/book-marketing" },
      {
        label: "Book Illustration",
        href: "/services/book-illustration",
      },
      {
        label: "Website Content Writing",
        href: "/services/website-content-writing",
      },
      { label: "Book Publishing", href: "/services/book-publishing" },
      { label: "Proofreading", href: "/services/proofreading" },
      { label: "Book Editing", href: "/services/book-editing" },
    ],
  },
  { label: "Contact Us", href: "/contact-us" },
];

// Get current path for active link highlighting
const currentPath = Astro.url.pathname;
---

<header
  id="navbar"
  class="fixed z-50 w-screen border-b border-white/30 bg-transparent transition-all duration-300"
>
  <div class="app-max-width">
    <nav
      class="relative flex items-center justify-between py-4 xl:py-6 2xl:py-8"
      aria-label="Main navigation"
    >
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href="/">
          <Image
            src={Logo}
            alt="Logo"
            class="h-[39px] max-h-[55px] w-auto xl:h-auto"
            loading={"eager"}
          />
        </a>
      </div>

      <!-- Desktop Menu -->
      <ul
        class="hidden list-none space-x-8 text-xs md:flex md:items-center xl:text-base"
      >
        {
          navItems.map((item, index) => {
            const isActive =
              (item.href === "/" && currentPath === "/") ||
              (item.href !== "/" && currentPath.startsWith(item.href));

            if (item.hasDropdown) {
              const hasActiveChild = item.dropdownItems?.some((child) =>
                currentPath.startsWith(child.href),
              );

              return (
                <li class="group dropdown-wrapper" data-dropdown-index={index}>
                  <span
                    class:list={[
                      "dropdown-toggle flex cursor-pointer items-center py-1 transition duration-300",
                      "text-white",
                      {
                        "font-semibold text-[#ff002d]":
                          isActive || hasActiveChild,
                      },
                    ]}
                    aria-current={isActive ? "page" : undefined}
                    aria-expanded="false"
                    aria-controls={`dropdown-${index}`}
                  >
                    {item.label}
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="dropdown-arrow ml-1 h-[14px] w-[14px]"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                    >
                      <path
                        fill-rule="evenodd"
                        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 111.414 1.414l-4 4a1 1 01-1.414 0l-4-4a 1 1 010-1.414z"
                        clip-rule="evenodd"
                      />
                    </svg>
                  </span>
                  <div
                    id={`dropdown-${index}`}
                    class="dropdown-menu ring-opacity-5 invisible absolute top-full left-0 flex w-full translate-y-2 transform flex-row justify-between gap-x-6 rounded-md bg-white pr-6 opacity-0 shadow-lg ring-1 ring-black transition-all duration-300"
                  >
                    <div class="flex w-[40%] flex-col py-8 xl:w-[50%]">
                      <h4 class="mb-2 pl-6 text-xl font-semibold 2xl:text-2xl">
                        Made To <span class="text-primary-red">Scale</span>
                      </h4>
                      <p class="w-[80%] pl-6 text-xs text-[#303030] 2xl:text-sm">
                        Our nixxon publishing services are built to evolve your
                        business idea int a successful growth story
                      </p>
                      <Image
                        src={NavImage}
                        alt="Nav Image"
                        class="mt-6 w-auto max-w-[296px] object-cover 2xl:max-w-[400px]"
                        loading={"lazy"}
                      />
                    </div>
                    <div class="grid w-full grid-cols-3 gap-x-12 gap-y-2 pt-6">
                      {item.dropdownItems.map((child) => {
                        const isChildActive = currentPath.startsWith(
                          child.href,
                        );
                        return (
                          <div class="w-fit border-b border-b-[#A6ABBB] pt-2">
                            <a
                              href={child.href}
                              class:list={[
                                "mb-1 block font-semibold text-nowrap transition duration-300 lg:text-xs xl:text-sm 2xl:text-base",
                                "text-[#303030]",
                                { "text-[#ff002d]": isChildActive },
                              ]}
                              aria-current={isChildActive ? "page" : undefined}
                            >
                              {child.label}
                            </a>
                            <span class="mt-2 block text-[9px] whitespace-nowrap text-[#303030] 2xl:text-xs">
                              Turning your creativity into timeless stories
                            </span>
                            <div />
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </li>
              );
            }

            return (
              <li>
                <a
                  href={item.href}
                  class:list={[
                    "py-1 transition duration-300",
                    "text-white",
                    { "nav-active font-semibold text-[#ff002d]": isActive },
                  ]}
                  aria-current={isActive ? "page" : undefined}
                >
                  {item.label}
                </a>
              </li>
            );
          })
        }
      </ul>

      <!-- Change this button to be hidden on mobile -->
      <a
        href="#"
        class="open-contact-modal bg-primary-red hidden rounded-md px-6 py-2 text-xs text-white capitalize md:block xl:text-base"
      >
        let's discuss
      </a>

      <!-- Add hamburger button for mobile -->
      <button
        id="mobile-menu-toggle"
        class="flex h-10 w-10 flex-col items-center justify-center focus:outline-none md:hidden"
        aria-label="Toggle mobile menu"
      >
        <span
          class="hamburger-line mb-1.5 h-0.5 w-6 bg-white transition-all duration-300"
        ></span>
        <span
          class="hamburger-line mb-1.5 h-0.5 w-6 bg-white transition-all duration-300"
        ></span>
        <span
          class="hamburger-line h-0.5 w-6 bg-white transition-all duration-300"
        ></span>
      </button>
    </nav>
  </div>
</header>

<!-- Mobile Drawer Menu -->
<div
  id="mobile-drawer"
  class="bg-primary-blue fixed top-0 right-0 z-50 h-full w-[80%] max-w-sm translate-x-full transform overflow-y-auto shadow-xl transition-transform duration-300 ease-in-out md:hidden"
>
  <div class="p-6">
    <div class="mb-8 flex items-center justify-between">
      <a href="/">
        <Image
          src={Logo}
          alt="Logo"
          class="h-[39px] w-auto"
          loading={"eager"}
        />
      </a>
      <button id="close-drawer" class="text-white" aria-label="Close menu">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <ul class="space-y-4">
      {
        navItems.map((item) => {
          const isActive =
            (item.href === "/" && currentPath === "/") ||
            (item.href !== "/" && currentPath.startsWith(item.href));

          if (item.hasDropdown) {
            return (
              <li>
                <div class="mobile-dropdown-toggle flex w-full items-center justify-between py-2 text-white">
                  <span
                    class:list={["font-medium", { "text-[#ff002d]": isActive }]}
                  >
                    {item.label}
                  </span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="mobile-dropdown-arrow h-5 w-5 transition-transform"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 111.414 1.414l-4 4a1 1 01-1.414 0l-4-4a 1 1 010-1.414z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </div>
                <ul class="mobile-dropdown-menu mt-2 hidden space-y-2 pl-4">
                  {item.dropdownItems.map((child) => {
                    const isChildActive = currentPath.startsWith(child.href);
                    return (
                      <li>
                        <a
                          href={child.href}
                          class:list={[
                            "block py-2 text-sm",
                            "text-white",
                            { "font-medium text-[#ff002d]": isChildActive },
                          ]}
                        >
                          {child.label}
                        </a>
                      </li>
                    );
                  })}
                </ul>
              </li>
            );
          }

          return (
            <li>
              <a
                href={item.href}
                class:list={[
                  "block py-2 text-white",
                  { "font-medium text-[#ff002d]": isActive },
                ]}
              >
                {item.label}
              </a>
            </li>
          );
        })
      }
    </ul>

    <div class="mt-8">
      <a
        href="#"
        class="open-contact-modal bg-primary-red rounded-md px-6 py-2 text-xs text-white capitalize xl:text-base"
      >
        let's discuss
      </a>
    </div>
  </div>
</div>

<!-- Overlay for mobile drawer -->
<div
  id="drawer-overlay"
  class="bg-opacity-50 fixed inset-0 z-40 hidden bg-black md:hidden"
>
</div>

<div
  class="top-2/3 right-0 z-40 hidden -translate-y-1/2 transform flex-col gap-y-4 md:fixed md:flex"
>
  <a

    class="open-contact-modal rotate-button border-b-none border-primary-blue text-primary-blue rounded-t-lg border bg-white px-6 py-2 text-base font-semibold 2xl:text-lg"
  >
    Get a Quote
  </a>
  <button
    class="border-primary-blue rounded-l-lg border border-r-0 bg-white p-2"
  >
    <Image src={ChatIcon} alt={"chat icon"} width={24} height={24} />
  </button>
  <a
    href="tel:+166265271652"
    class="border-primary-blue rounded-l-lg border border-r-0 bg-white p-2"
  >
    <Image src={CallIcon} alt={"call icon"} width={24} height={24} />
  </a>
</div>

<script>
  // Navbar background on scroll
  const navbar = document.getElementById("navbar");

  function handleScroll() {
    if (window.scrollY > 10) {
      navbar.classList.add("bg-primary-blue");
      navbar.classList.remove("bg-transparent");
    } else {
      navbar.classList.remove("bg-primary-blue");
      navbar.classList.add("bg-transparent");
    }
  }

  window.addEventListener("scroll", handleScroll);
  handleScroll();

  // Dropdown click functionality
  let activeDropdown = null;

  // Get all dropdown toggles
  const dropdownToggles = document.querySelectorAll(".dropdown-toggle");

  // Add click event to each toggle
  dropdownToggles.forEach((toggle) => {
    toggle.addEventListener("click", (e) => {
      e.preventDefault();

      // Get the parent dropdown wrapper
      const wrapper = toggle.closest(".dropdown-wrapper");
      const dropdownMenu = wrapper.querySelector(".dropdown-menu");

      // Toggle aria-expanded
      const isExpanded = toggle.getAttribute("aria-expanded") === "true";
      toggle.setAttribute("aria-expanded", !isExpanded);

      // If already open, close it
      if (dropdownMenu.classList.contains("dropdown-active")) {
        closeDropdown(dropdownMenu);
        activeDropdown = null;
      } else {
        // If another dropdown is open, close it first
        if (activeDropdown) {
          closeDropdown(activeDropdown);
          activeDropdown.previousElementSibling.setAttribute(
            "aria-expanded",
            "false",
          );
        }

        // Open current dropdown
        openDropdown(dropdownMenu);
        activeDropdown = dropdownMenu;
      }
    });
  });

  // Close dropdown when clicking outside
  document.addEventListener("click", (e) => {
    if (activeDropdown && !e.target.closest(".dropdown-wrapper")) {
      closeDropdown(activeDropdown);
      const toggle = activeDropdown.previousElementSibling;
      toggle.setAttribute("aria-expanded", "false");
      activeDropdown = null;
    }
  });

  // Helper functions
  function openDropdown(dropdown) {
    dropdown.classList.add("dropdown-active");
    dropdown.classList.add("opacity-100", "visible");
    dropdown.classList.remove("opacity-0", "invisible", "translate-y-2");
  }

  function closeDropdown(dropdown) {
    dropdown.classList.remove("dropdown-active");
    dropdown.classList.remove("opacity-100", "visible");
    dropdown.classList.add("opacity-0", "invisible", "translate-y-2");
  }

  // Mobile menu functionality
  const mobileMenuToggle = document.getElementById("mobile-menu-toggle");
  const mobileDrawer = document.getElementById("mobile-drawer");
  const closeDrawer = document.getElementById("close-drawer");
  const drawerOverlay = document.getElementById("drawer-overlay");
  const body = document.body;

  // Open mobile menu
  mobileMenuToggle?.addEventListener("click", () => {
    mobileDrawer.classList.remove("translate-x-full");
    drawerOverlay.classList.remove("hidden");
    mobileMenuToggle.classList.add("active");
    body.classList.add("overflow-hidden");
  });

  // Close mobile menu
  closeDrawer?.addEventListener("click", () => {
    closeMobileMenu();
  });

  // Close when clicking overlay
  drawerOverlay?.addEventListener("click", () => {
    closeMobileMenu();
  });

  function closeMobileMenu() {
    mobileDrawer.classList.add("translate-x-full");
    drawerOverlay.classList.add("hidden");
    mobileMenuToggle.classList.remove("active");
    body.classList.remove("overflow-hidden");
  }

  // Mobile dropdown toggles
  const mobileDropdownToggles = document.querySelectorAll(
    ".mobile-dropdown-toggle",
  );

  mobileDropdownToggles.forEach((toggle) => {
    toggle.addEventListener("click", () => {
      const menu = toggle.nextElementSibling;
      const arrow = toggle.querySelector(".mobile-dropdown-arrow");

      // Toggle the dropdown visibility
      menu.classList.toggle("hidden");

      // Rotate the arrow icon
      if (menu.classList.contains("hidden")) {
        arrow.classList.remove("rotate-180");
      } else {
        arrow.classList.add("rotate-180");
      }
    });
  });
</script>

<style>
  /* Style for active navigation link */
  .nav-active {
    border-bottom: #ff002d 1px solid;
  }

  /* Hover effects for nav items */
  #navbar ul > li > a,
  #navbar ul > li > span {
    position: relative;
    transition: color 0.3s ease;
  }

  #navbar ul > li > a:hover,
  #navbar ul > li > span:hover {
    color: #ff002d;
  }

  #navbar ul > li > a:after,
  #navbar ul > li > span:after {
    content: "";
    position: absolute;
    width: 0;
    height: 1px;
    bottom: -2px;
    left: 0;
    background-color: #ff002d;
    transition: width 0.3s ease;
  }

  #navbar ul > li > a:hover:after,
  #navbar ul > li > span:hover:after {
    width: 100%;
  }

  /* Hover effects for dropdown */
  .group:hover .dropdown-menu:not(.dropdown-active) {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .dropdown-active {
    opacity: 1 !important;
    visibility: visible !important;
    transform: translateY(0) !important;
  }

  .rotate-button {
    position: absolute;
    transform: rotate(-90deg);
    transform-origin: top right;
    right: 40px;
    top: -170px;
    border-radius: 0.5rem 0.5rem 0 0;
    white-space: nowrap;
  }

  button {
    cursor: pointer;
  }

  /* Mobile drawer styles */
  #mobile-drawer {
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  #drawer-overlay {
    transition: opacity 0.3s ease;
  }

  .mobile-dropdown-arrow {
    transition: transform 0.3s ease;
  }

  /* Mobile menu animations */
  #mobile-menu-toggle.active .hamburger-line:nth-child(1) {
    transform: translateY(8px) rotate(45deg);
  }

  #mobile-menu-toggle.active .hamburger-line:nth-child(2) {
    opacity: 0;
  }

  #mobile-menu-toggle.active .hamburger-line:nth-child(3) {
    transform: translateY(-8px) rotate(-45deg);
  }

  /* Mobile dropdown animation */
  .mobile-dropdown-arrow.rotate-180 {
    transform: rotate(180deg);
  }

  /* Prevent body scroll when drawer is open */
  body.overflow-hidden {
    overflow: hidden;
  }
</style>

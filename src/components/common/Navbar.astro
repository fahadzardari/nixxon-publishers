---
import { Image } from "astro:assets";
import Logo from "../../assets/logo.png";
import NavImage from "../../assets/common/nav-image.png";
import ChatIcon from "../../assets/home/chat.png";
import CallIcon from "../../assets/home/call.png";

const navItems = [
  { label: "Home", href: "/" },
  { label: "About Us", href: "/about-us" },
  {
    label: "Services",
    href: "/services",
    hasDropdown: true,
    dropdownItems: [
      { label: "Ghost Writing", href: "/services/ghost-writing" },
      { label: "Article Publication", href: "/services/article-publication" },
      { label: "Cover Design", href: "/services/cover-design" },
      { label: "Audiobooks", href: "/services/audiobooks" },
      { label: "Book Printing", href: "/services/book-printing" },
      { label: "Book Video Trailer", href: "/services/book-video-trailer" },
      { label: "Web Design", href: "/services/web-design" },
      { label: "Blog Writing", href: "/services/blog-writing" },
      { label: "Book Marketing", href: "/services/book-marketing" },
      {
        label: "Book Illustration",
        href: "/services/book-illustration",
      },
      {
        label: "Website Content Writing",
        href: "/services/website-content-writing",
      },
      { label: "Book Publishing", href: "/services/book-publishing" },
      { label: "Proofreading", href: "/services/proofreading" },
      { label: "Book Editing", href: "/services/book-editing" },
    ],
  },
  { label: "Contact Us", href: "/contact-us" },
];

// Get current path for active link highlighting
const currentPath = Astro.url.pathname;
---

<header
  id="navbar"
  class="bg-transparent fixed w-screen z-50 transition-all duration-300 border-b border-white/30"
>
  <div class="app-max-width">
    <nav
      class="flex justify-between items-center py-4 xl:py-6 2xl:py-8 relative"
      aria-label="Main navigation"
    >
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href="/">
          <Image
            src={Logo}
            alt="Logo"
            class="max-h-[55px] h-[39px] xl:h-auto w-auto"
            loading={"eager"}
          />
        </a>
      </div>

      <!-- Desktop Menu -->
      <ul
        class="hidden md:flex md:items-center space-x-8 list-none text-xs xl:text-base"
      >
        {
          navItems.map((item, index) => {
            const isActive =
              (item.href === "/" && currentPath === "/") ||
              (item.href !== "/" && currentPath.startsWith(item.href));

            if (item.hasDropdown) {
              const hasActiveChild = item.dropdownItems?.some((child) =>
                currentPath.startsWith(child.href)
              );

              return (
                <li class="group dropdown-wrapper" data-dropdown-index={index}>
                  <span
                    class:list={[
                      "dropdown-toggle transition duration-300 flex items-center cursor-pointer py-1",
                      "text-white",
                      {
                        "text-[#ff002d] font-semibold":
                          isActive || hasActiveChild,
                      },
                    ]}
                    aria-current={isActive ? "page" : undefined}
                    aria-expanded="false"
                    aria-controls={`dropdown-${index}`}
                  >
                    {item.label}
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-[14px] w-[14px] ml-1 dropdown-arrow"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                    >
                      <path
                        fill-rule="evenodd"
                        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 111.414 1.414l-4 4a1 1 01-1.414 0l-4-4a1 1 010-1.414z"
                        clip-rule="evenodd"
                      />
                    </svg>
                  </span>
                  <div
                    id={`dropdown-${index}`}
                    class="dropdown-menu flex flex-row justify-between pr-6 gap-x-6 absolute left-0 top-full w-full rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 opacity-0 invisible transition-all duration-300 transform translate-y-2"
                  >
                    <div class="flex flex-col w-[40%] xl:w-[50%] py-8">
                      <h4 class="text-xl 2xl:text-2xl font-semibold pl-6 mb-2">
                        Made To <span class="text-primary-red">Scale</span>
                      </h4>
                      <p class="pl-6 text-xs 2xl:text-sm text-[#303030] w-[80%]">
                        Our nixxon publishing services are built to evolve your
                        business idea int a successful growth story
                      </p>
                      <Image
                        src={NavImage}
                        alt="Nav Image"
                        class="object-cover max-w-[296px] 2xl:max-w-[400px] w-auto mt-6"
                        loading={"lazy"}
                      />
                    </div>
                    <div class="grid grid-cols-3 gap-y-2 gap-x-12 pt-6 w-full">
                      {item.dropdownItems.map((child) => {
                        const isChildActive = currentPath.startsWith(
                          child.href
                        );
                        return (
                          <div class="border-b border-b-[#A6ABBB] w-fit pt-2">
                            <a
                              href={child.href}
                              class:list={[
                                "transition duration-300 text-nowrap lg:text-xs xl:text-sm 2xl:text-base mb-1 block font-semibold",
                                "text-[#303030]",
                                { "text-[#ff002d]": isChildActive },
                              ]}
                              aria-current={isChildActive ? "page" : undefined}
                            >
                              {child.label}
                            </a>
                            <span class="text-[9px] 2xl:text-xs whitespace-nowrap mt-2 text-[#303030] block">
                              Turning your creativity into timeless stories
                            </span>
                            <div />
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </li>
              );
            }

            return (
              <li>
                <a
                  href={item.href}
                  class:list={[
                    "transition duration-300 py-1",
                    "text-white",
                    { "text-[#ff002d] font-semibold nav-active": isActive },
                  ]}
                  aria-current={isActive ? "page" : undefined}
                >
                  {item.label}
                </a>
              </li>
            );
          })
        }
      </ul>

      <button
        class="bg-primary-red text-white text-xs xl:text-base capitalize px-6 py-2 rounded-md"
      >
        let's discuss
      </button>
    </nav>
  </div>
</header>

<div
  class="fixed flex flex-col gap-y-4 top-2/3 transform -translate-y-1/2 z-40 right-0"
>
  <button
    class="rotate-button border border-b-none border-primary-blue bg-white py-2 px-6 text-base 2xl:text-lg font-semibold text-primary-blue rounded-t-lg"
  >
    Get a Quote
  </button>
  <button
    class="bg-white rounded-l-lg p-2 border border-r-0 border-primary-blue"
  >
    <Image src={ChatIcon} alt={"chat icon"} width={24} height={24} />
  </button>
  <button
    class="bg-white rounded-l-lg p-2 border border-r-0 border-primary-blue"
  >
    <Image src={CallIcon} alt={"call icon"} width={24} height={24} />
  </button>
</div>

<script>
  // Navbar background on scroll
  const navbar = document.getElementById("navbar");

  function handleScroll() {
    if (window.scrollY > 10) {
      navbar.classList.add("bg-primary-blue");
      navbar.classList.remove("bg-transparent");
    } else {
      navbar.classList.remove("bg-primary-blue");
      navbar.classList.add("bg-transparent");
    }
  }

  window.addEventListener("scroll", handleScroll);
  handleScroll();

  // Dropdown click functionality
  let activeDropdown = null;

  // Get all dropdown toggles
  const dropdownToggles = document.querySelectorAll(".dropdown-toggle");

  // Add click event to each toggle
  dropdownToggles.forEach((toggle) => {
    toggle.addEventListener("click", (e) => {
      e.preventDefault();

      // Get the parent dropdown wrapper
      const wrapper = toggle.closest(".dropdown-wrapper");
      const dropdownMenu = wrapper.querySelector(".dropdown-menu");

      // Toggle aria-expanded
      const isExpanded = toggle.getAttribute("aria-expanded") === "true";
      toggle.setAttribute("aria-expanded", !isExpanded);

      // If already open, close it
      if (dropdownMenu.classList.contains("dropdown-active")) {
        closeDropdown(dropdownMenu);
        activeDropdown = null;
      } else {
        // If another dropdown is open, close it first
        if (activeDropdown) {
          closeDropdown(activeDropdown);
          activeDropdown.previousElementSibling.setAttribute(
            "aria-expanded",
            "false"
          );
        }

        // Open current dropdown
        openDropdown(dropdownMenu);
        activeDropdown = dropdownMenu;
      }
    });
  });

  // Close dropdown when clicking outside
  document.addEventListener("click", (e) => {
    if (activeDropdown && !e.target.closest(".dropdown-wrapper")) {
      closeDropdown(activeDropdown);
      const toggle = activeDropdown.previousElementSibling;
      toggle.setAttribute("aria-expanded", "false");
      activeDropdown = null;
    }
  });

  // Helper functions
  function openDropdown(dropdown) {
    dropdown.classList.add("dropdown-active");
    dropdown.classList.add("opacity-100", "visible");
    dropdown.classList.remove("opacity-0", "invisible", "translate-y-2");
  }

  function closeDropdown(dropdown) {
    dropdown.classList.remove("dropdown-active");
    dropdown.classList.remove("opacity-100", "visible");
    dropdown.classList.add("opacity-0", "invisible", "translate-y-2");
  }
</script>

<style>
  /* Style for active navigation link */
  .nav-active {
    border-bottom: #ff002d 1px solid;
  }

  /* Hover effects for nav items */
  #navbar ul > li > a,
  #navbar ul > li > span {
    position: relative;
    transition: color 0.3s ease;
  }

  #navbar ul > li > a:hover,
  #navbar ul > li > span:hover {
    color: #ff002d;
  }

  #navbar ul > li > a:after,
  #navbar ul > li > span:after {
    content: "";
    position: absolute;
    width: 0;
    height: 1px;
    bottom: -2px;
    left: 0;
    background-color: #ff002d;
    transition: width 0.3s ease;
  }

  #navbar ul > li > a:hover:after,
  #navbar ul > li > span:hover:after {
    width: 100%;
  }

  /* Hover effects for dropdown */
  .group:hover .dropdown-menu:not(.dropdown-active) {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .dropdown-active {
    opacity: 1 !important;
    visibility: visible !important;
    transform: translateY(0) !important;
  }

  .rotate-button {
    position: absolute;
    transform: rotate(-90deg);
    transform-origin: top right;
    right: 40px;
    top: -170px;
    border-radius: 0.5rem 0.5rem 0 0;
    white-space: nowrap;
  }

  button {
    cursor: pointer;
  }
</style>

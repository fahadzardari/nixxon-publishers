---
import Image from "astro/components/Image.astro";
import Books from "../../assets/home/achievements.png";
---

<section
  class="md:app-right-padding flex flex-col py-[6dvw] md:flex-row md:gap-x-1"
  id="achievements-section"
>
  <div class="image-container md:w-1/2">
    <Image src={Books} alt="Books" class="w-full" />
  </div>
  <div
    class="content-container mx-4 flex flex-1 flex-col justify-center gap-y-4 md:ml-4"
  >
    <h3
      class="text-primary-red achievement-title mb-2 text-xl font-semibold md:text-2xl lg:text-3xl xl:text-4xl 2xl:text-5xl"
    >
      Our Achievements
    </h3>
    <p
      class="canvas:text-[15px] achievement-text text-[10px] sm:text-xs xl:text-sm 2xl:text-xl"
    >
      Our list of clients includes the bestselling writers, editorial agencies,
      businesses, publication companies, journals, and various first-time
      authors. We stand as the well-reputed firm in the ghostwriting industry
      and our clients have achieved their publication goals effectively. Whether
      you require a traditional book, or comprehensive ghostwriting services, we
      ensure your book is readily available to the target audience.
    </p>
    <div class="stats-container flex justify-between gap-x-3">
      <div class="stat-item flex w-1/3 flex-col items-center">
        <h4
          class="text-primary-red font-comme-regular counter -mb-2 text-5xl font-bold xl:text-[66px] 2xl:text-[80px]"
          data-target="9"
        >
          0
        </h4>
        <p
          class="stat-title my-2 text-center text-xs font-semibold md:text-sm xl:text-base 2xl:text-lg"
        >
          Years of Experience
        </p>
        <p
          class="stat-description text-center text-[8px] sm:text-[10px] xl:text-xs 2xl:text-base"
        >
          We have over 9 years of experience in Designing, Writing and Marketing
        </p>
      </div>
      <div class="stat-item flex w-1/3 flex-col items-center">
        <h4
          class="text-primary-red font-comme-regular counter -mb-2 text-5xl font-bold xl:text-[66px] 2xl:text-[80px]"
          data-target="100"
          data-suffix="+"
        >
          0
        </h4>
        <p
          class="stat-title my-2 text-center text-xs font-semibold md:text-sm xl:text-base 2xl:text-lg"
        >
          Books Published
        </p>
        <p
          class="stat-description text-center text-[8px] sm:text-[10px] xl:text-xs 2xl:text-base"
        >
          The counter is going up day by day. We know how to publish books in a
          fast manner.
        </p>
      </div>
      <div class="stat-item flex w-1/3 flex-col items-center">
        <h4
          class="text-primary-red font-comme-regular counter -mb-2 text-5xl font-bold xl:text-[66px] 2xl:text-[80px]"
          data-target="250"
          data-suffix="+"
        >
          0
        </h4>
        <p
          class="stat-title my-2 text-center text-xs font-semibold md:text-sm xl:text-base 2xl:text-lg"
        >
          Clients
        </p>
        <p
          class="stat-description text-center text-[8px] sm:text-[10px] xl:text-xs 2xl:text-base"
        >
          Ghostwriting Professionals has clients from all around the globe.
        </p>
      </div>
    </div>
  </div>
</section>

<script>
  import gsap from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import SplitType from "split-type";

  document.addEventListener("DOMContentLoaded", () => {
    // Register ScrollTrigger plugin
    gsap.registerPlugin(ScrollTrigger);

    // Make sure section is visible for ScrollTrigger
    gsap.set("#achievements-section", { opacity: 1, visibility: "visible" });

    // Ensure all needed elements exist before proceeding
    const section = document.querySelector("#achievements-section");
    if (!section) return;

    // Split text for animations - only for the title
    let achievementTitle;
    try {
      achievementTitle = new SplitType(".achievement-title", {
        types: "words, chars",
      });

      const statTitles = new SplitType(".stat-title", { types: "words" });
    } catch (error) {
      console.error("Error splitting text:", error);
    }

    // Set initial states (but don't hide the section completely)
    gsap.set("#achievements-section", { y: 50 });
    gsap.set(".image-container", { opacity: 0, x: -50 });
    if (achievementTitle && achievementTitle.chars) {
      gsap.set(achievementTitle.chars, { opacity: 0, y: 20 });
    }
    gsap.set(".achievement-text", { opacity: 0, y: 10 });
    gsap.set(".stat-item", { opacity: 0, y: 30 });

    // Create the animation timeline with markers for debugging
    const tl = gsap.timeline({
      scrollTrigger: {
        trigger: "#achievements-section",
        start: "top 80%",
        end: "bottom 20%",
        toggleActions: "play none none none",
        // markers: true, // Add markers to help debug (remove in production)
        id: "achievements",
      },
    });

    // Add animations to timeline
    tl.to("#achievements-section", { y: 0, duration: 0.6 }).to(
      ".image-container",
      { opacity: 1, x: 0, duration: 0.8 },
      "-=0.4",
    );

    // Only add char animations if they exist
    if (achievementTitle && achievementTitle.chars) {
      tl.to(
        achievementTitle.chars,
        {
          opacity: 1,
          y: 0,
          duration: 0.6,
          stagger: 0.02,
        },
        "-=0.4",
      );
    }

    tl.to(
      ".achievement-text",
      {
        opacity: 1,
        y: 0,
        duration: 0.8,
      },
      "-=0.2",
    ).to(
      ".stat-item",
      {
        opacity: 1,
        y: 0,
        stagger: 0.2,
        duration: 0.8,
        onComplete: function () {
          // Start counters immediately after stat items appear
          startCounters();
        },
      },
      "-=0.4",
    );

    // Function to handle all counters in sequence
    function startCounters() {
      const counters = document.querySelectorAll(".counter");
      if (counters.length === 0) return;

      // First counter
      animateCounter(counters[0], 0, function () {
        // When first counter is done, start second
        if (counters.length > 1) {
          animateCounter(counters[1], 1, function () {
            // When second counter is done, start third
            if (counters.length > 2) {
              animateCounter(counters[2], 2);
            }
          });
        }
      });
    }

    function animateCounter(counterElement, index, onComplete) {
      if (!counterElement) return;

      const target = parseInt(
        counterElement.getAttribute("data-target") || "0",
      );
      const suffix = counterElement.getAttribute("data-suffix") || "";

      // Adjust duration based on counter value
      const duration = index === 0 ? 0.5 : index === 1 ? 2 : 2.5;

      gsap.to(
        { value: 0 },
        {
          value: target,
          duration: duration,
          ease: "power1.inOut",
          onUpdate: function () {
            counterElement.textContent =
              Math.ceil(this.targets()[0].value) + suffix;
          },
          onComplete: onComplete,
        },
      );
    }
  });
</script>
